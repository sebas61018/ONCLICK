<section class="py-20 px-6 bg-white text-[#1e293b]">
  <div class="max-w-6xl mx-auto text-center">

    <h2 class="text-4xl md:text-5xl font-serif font-bold mb-6">Nuestro impacto</h2>

    <p class="text-lg md:text-xl mb-12 font-sans text-[#334155] max-w-3xl mx-auto">
      En <span class="text-yellow-500 font-semibold">ONCLICK</span> creemos en resultados reales. 
      Por eso, cada marca con la que trabajamos deja huella: medible, visible y emocional.
    </p>

    <!-- Métricas en tarjetas -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-16">
      <div class="bg-white shadow-lg rounded-2xl p-6 text-center border border-gray-100">
        <p id="count1" class="text-4xl font-bold text-yellow-500 mb-2">0</p>
        <p class="text-base text-[#475569]">Incremento promedio en alcance orgánico</p>
      </div>
      <div class="bg-white shadow-lg rounded-2xl p-6 text-center border border-gray-100">
        <p id="count2" class="text-4xl font-bold text-yellow-500 mb-2">0</p>
        <p class="text-base text-[#475569]">Marcas transformadas digitalmente</p>
      </div>
      <div class="bg-white shadow-lg rounded-2xl p-6 text-center border border-gray-100">
        <p id="count3" class="text-4xl font-bold text-yellow-500 mb-2">0</p>
        <p class="text-base text-[#475569]">Vistas acumuladas en campañas</p>
      </div>
    </div>

    <!-- Testimonio -->
    <blockquote class="italic text-[#475569] max-w-3xl mx-auto">
      “Con ONCLICK logramos mostrar el alma de nuestra marca en redes. Más que números, logramos conexión real.”
      <br />
      <span class="not-italic font-semibold text-sm text-yellow-500">– Cliente feliz</span>
    </blockquote>

  </div>

  <!-- Script para animar los contadores -->
  <script is:inline>
    document.addEventListener("DOMContentLoaded", function () {
      const counters = [
        { id: "count1", end: 120, suffix: "%" },
        { id: "count2", end: 30 },
        { id: "count3", end: 500000, suffix: "K", format: true }
      ];

      function animateValue(el, start, end, duration, suffix = "", format = false) {
        let startTime = null;

        function step(timestamp) {
          if (!startTime) startTime = timestamp;
          const progress = Math.min((timestamp - startTime) / duration, 1);
          const value = Math.floor(progress * (end - start) + start);
          el.textContent = format ? (value / 1000).toFixed(0) + suffix : value + suffix;
          if (progress < 1) {
            requestAnimationFrame(step);
          }
        }

        requestAnimationFrame(step);
      }

      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            counters.forEach(counter => {
              const el = document.getElementById(counter.id);
              if (el && !el.dataset.animated) {
                animateValue(el, 0, counter.end, 1500, counter.suffix || "", counter.format || false);
                el.dataset.animated = "true";
              }
            });
            observer.disconnect();
          }
        });
      }, { threshold: 0.5 });

      const target = document.getElementById("count1");
      if (target) observer.observe(target);
    });
  </script>
</section>
